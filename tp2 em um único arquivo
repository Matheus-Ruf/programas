#include <stdio.h>
#include <stdlib.h>


struct racional {
    unsigned short int valido; /* um racional eh invalido se den == 0 */
    int num;                   /* numerador do racional               */
    int den;                   /* denominador do racional             */
};



/* retorna um numero aleatorio entre min e max, inclusive. */
int aleat (int min, int max)
{
	return min + rand() % (max - min + 1);
}



/* Maximo Divisor Comum entre a e b      */
/* calcula o mdc pelo metodo de Euclides */
int mdc (int a, int b)
{
	if(b == 0)
		return a;
	return mdc(b, a % b);
}



/* Minimo Multiplo Comum entre a e b */
int mmc (int a, int b)
{
	return (a * b) / mdc (a, b);
}



void simplifica_r (struct racional *r)
{
	int i_mdc;
	
	i_mdc = mdc(r->num, r->den);
	r->den /= i_mdc;
	r->num /= i_mdc;
	
	if(r->den < 0) //troca sinais de num e de den se den for negativo
	{
		r->den = -(r->den);
		r->num = -(r->num);
	}
	
	return;
}

//

int valido_r (struct racional r)
{
	if(r.den == 0)
		return 0; //invalido
	return 1; //valido
}



struct racional cria_r (int numerador, int denominador)
{
	struct racional cria;
	
	cria.num    = numerador;
	cria.den    = denominador;
	cria.valido = valido_r(cria);
	
	if (cria.valido == 0)
		return cria;
	simplifica_r(&cria);
	
	return cria;
}



struct racional sorteia_r (int n)
{
	int nm, dn;
	struct racional r;
	
	nm = aleat(-n, n);
	dn = aleat(-n, n);
	r  = cria_r(nm, dn);
	
	return r;
	//return cria_r( aleat(-n, n) , aleat(-n, n) );
}


/* Retorna o numerador do racional r */
int numerador_r (struct racional r)
{
	return r.num;
}



/* Retorna o denominador do racional r */
int denominador_r (struct racional r)
{
	return r.den;
}



void soma_r (struct racional r1, struct racional r2, struct racional *r3)
{
	r3->den  = mmc(r1.den, r2.den);
	r3->num  = (r3->den / r1.den) * r1.num;
	r3->num += (r3->den / r2.den) * r2.num;
	
	r3->valido = 1;
	    simplifica_r(r3);
	
	return;
}



void subtrai_r (struct racional r1, struct racional r2, struct racional *r3)
{
    r3->den  = mmc(r1.den, r2.den);
	r3->num  = (r3->den / r1.den) * r1.num;
	r3->num -= (r3->den / r2.den) * r2.num;
	
	r3->valido = 1;
	    simplifica_r(r3);
	    
	return;
}



void multiplica_r (struct racional r1, struct racional r2, struct racional *r3)
{
    r3->num    = r1.num * r2.num;
	r3->den    = r1.den * r2.den;
	r3->valido = 1;
	
	simplifica_r(r3);
	    
	return;
}



int divide_r (struct racional r1, struct racional r2, struct racional *r3)
{
    r3->num    = r1.num * r2.den;
	r3->den    = r1.den * r2.num;
	r3->valido = valido_r(*r3);
	
	if(r3->valido == 1)
	    simplifica_r(r3);
	
	return r3->valido;
}



/* Retorna -1 se r1 < r2; 0 se r1 == r2; 1 se r1 > r2 */
int compara_r (struct racional r1, struct racional r2)
{
    float r1n, r1d, r2n, r2d;
    
    r1n = r1.num;
    r1d = r1.den;
    r2n = r2.num;
    r2d = r2.den;
    
    if(r1n/r1d  < r2n/r2d)
        return -1;
    if(r1n/r1d == r2n/r2d)
        return 0;
    //r1.num/r1.den > r2.num/r2.den
    return 1;
}



void imprime_r (struct racional r)
{
	int i;
	
	if(r.den == 0)
	{
		printf("INVALIDO");
		return;
	}
	
	simplifica_r(&r);
	
	//soma as possibilidades
	i = 0;
	if(r.num == 0) //numerador 0, imprime 0
		i += 1;
	if(r.den == 1) //denominador 1, imprime numerador
		i += 2;
	if(r.num == r.den) //numerador igual denominador, imprime 1
		i += 4;
	
	switch(i)
	{
		case 0:
			printf("%d/%d", r.num, r.den);
			break;
		case 1:
		case 3:
			printf("0");
			break;
		case 2:
			printf("%d", r.num);
			break;
		case 6:
		case 4:
			printf("1");
			break;
		//nao ha case 5 e 7 pois sao possibilidades impossiveis
	}
	return;
}

//

int main ()
{
    int n, i, max;
    struct racional r1, r2,
                    r_som, r_sub, r_mul, r_div;
    
    srand(0);
    
    do{ // Lê: 0 < n < 100.
    scanf("%d", &n);    }while(0>n || n>100);
    
    do{ // Lê: 0 < max < 30.
    scanf("%d", &max);  }while(0>max || max>30);
    
    // De 1 até n; imprime "i:", r1, r2, r1+r2, r1-r2, r1*r2, r1/r2.
    // Se r1 ou r2 for um racional invalido, imprimira "NUMERO INVALIDO".
    // Se r1/r2 der um racional invalido, imprimira "DIVISAO INVALIDA".
    for(i = 1; i <= n; i++)
    {
        printf("%d: ", i);
        
        // os racionais sao numeros aleatorios.
        r1 = sorteia_r(max);
        r2 = sorteia_r(max);
        
        imprime_r(r1);
        printf(" ");
        imprime_r(r2);
        printf(" ");
        
        // verifica se r1 ou r2 eh invalido.
        if(valido_r(r1) == 0 || valido_r(r2) == 0)
        {
            printf("NUMERO INVALIDO");
            printf("\n");
            
            return 1;
        }
        
        soma_r(r1, r2, &r_som);
        subtrai_r(r1, r2, &r_sub);
        multiplica_r(r1, r2, &r_mul);
        divide_r(r1, r2, &r_div);
        
        // verifica se r1/r2 resulta em um numero invalido.
        if(valido_r(r_div) == 0)
        {
            printf("DIVISAO INVALIDA");
            printf("\n");
            
            return 1;
        }
        
        imprime_r(r_som);
        printf(" ");
        imprime_r(r_sub);
        printf(" ");
        imprime_r(r_mul);
        printf(" ");
        imprime_r(r_div);
        printf("\n");
    }
    
    return 0;
}
